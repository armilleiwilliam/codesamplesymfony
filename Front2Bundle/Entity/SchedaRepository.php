<?php

namespace Casa\Front2Bundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SchedaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SchedaRepository extends EntityRepository
{
    
    // Pagination
    public function scheda_pag($data = null){
                // trovo quante righe sono contenute nella join per creare la pagination
        
           $entities2 = $this->createQueryBuilder("s")
                ->leftJoin("s.tipologia", "t")
                ->leftJoin("s.contratti", "c")
                ->leftJoin("c.prezzo","p")
                ->orderBy("s.indirizzo ASC");
           
        if($data["riferimento"] != null && $data["riferimento"] != ""){
            $entities2->where("s.id like :rifer" )->setParameter(':rifer', '%'.$data["riferimento"].'%');
        }else if($data["indirizzo"] != null && $data["indirizzo"] != ""){
            $entities2->where("s.indirizzo like :data" )->setParameter(':data', '%'.$data["indirizzo"].'%');
        }else if($data["tipologia"]!= null && $data["tipologia"]!=""){
             
            $entities2->where("t.id = :tip_id" )->setParameter("tip_id", $data["tipologia"]);
        }else if($data["locali"]!= null && $data["locali"]!=""){
        
            $entities2->where("s.locali = :num_locali" )->setParameter("num_locali", $data["locali"]);
        }
        $entities2->orderBy("s.id");
        $eq2 = $entities2->getQuery()->execute();
// fine pagination
        return array('pagi'=>$eq2);
    }
    
    // trovo schede
    public function scheda($data = null, $page){
        // variabile che diventa 1 se è stato inserito un riferimento o un indirizzo nei campi omonimi, in tal modo non verrà eseguito il pagination
     $rif_ind = 0;
        $entities = $this->createQueryBuilder("s")
                ->leftJoin("s.tipologia", "t")
                ->leftJoin("s.contratti", "c")
                ->leftJoin("c.prezzo","p");
        
        // se inserisco un riferimento nel campo "Riferimento" della form trovo l'elemento associato nel database e lo rendo
        if($data["riferimento"] != null && $data["riferimento"] != ""){
            $rif_ind = 1;
            $entities->where("s.id like :rifer" )->setParameter(':rifer', '%'.$data["riferimento"].'%');
        // se inserisco un indirizzo nel campo "Indirizzo" della form trovo l'elemento associato nel database e lo rendo    
        }else if($data["indirizzo"] != null && $data["indirizzo"] != ""){
                
            $entities->where("s.indirizzo like :data" )->setParameter(':data', '%'.$data["indirizzo"].'%');
        }else if($data["tipologia"]!= null && $data["tipologia"]!=""){
               $rif_ind = 1;
            $entities->where("t.id = :tip_id" )->setParameter("tip_id", $data["tipologia"]);
        }else if($data["locali"]!= null && $data["locali"]!=""){
            $rif_ind = 1;
            $entities->where("s.locali = :num_locali" )->setParameter("num_locali", $data["locali"]);
        }
        $entities->orderBy("s.indirizzo");
    
        // se è stato inserito un riferimento o un indirizzo non vengono stabiliti i limiti di visualizzazione
        if($rif_ind == 0){
                $entities->setFirstResult($page)
                ->setMaxResults(10);
        }
        $eq = $entities->getQuery()->execute();
        
      $arr = array();
        foreach($eq as $ris){
    $prezzi = $ris->getPrezzi();
            $arr[] = array(
                "id" => $ris->getId(),
                "tipologia" => $ris->getTipologia(),
                "indirizzo" => $ris->getIndirizzo(),
                "cap" => $ris->getCap(),
                "localita" => $ris->getLocalita(),
                "caratteristiche" => $ris->getCaratteristiche(),
                "contratti" => $ris->getContratti(),
                "evidenza" => $ris->getEvidenza(),
                "asta" => $ris->getAsta(),
                "pubblicazione" => $ris->getPubblicazione(),
                "venditaaffitto" => $ris->getPrezzi(),
                "tip_id" => $ris->getTipologia()->getCategoria()->getId(), 
                
            );
            
        }
        return array('ent'=>$arr);
    }
    public function mappe_list(){
        
                $qb2 = $this->createQueryBuilder('q')
                ->leftJoin('q.contratti', 'r')
                ->leftJoin('q.tipologia','t')
                ->leftJoin('t.categoria','c')
                ->orderBy('q.indirizzo','ASC')
                ->getQuery()
                ->execute();
        ;
        return array("app"=>$qb2);
                 
    }
}
